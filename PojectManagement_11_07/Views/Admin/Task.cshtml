@model ProjectManagement_11_07.Models.ViewModel.TaskViewModel
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Task</title>
    @*<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">*@
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/5.1.3/css/bootstrap.min.css" rel="stylesheet">

    <style>
        .task-board {
            display: flex;
            justify-content: space-between;
        }

        .task-list {
            width: 45%;
            background-color: #f8f9fa;
            padding: 10px;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        }

        .task-list h4 {
            text-align: center;
            margin-bottom: 20px;
        }

        .task {
            background-color: white;
            padding: 10px;
            margin-bottom: 10px;
            border-radius: 5px;
            box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
        }

        .task h5 {
            margin: 0;
        }

        .task p {
            margin: 5px 0;
        }

        .task .badge {
            font-size: 12px;
        }
        .avatar-sm {
            width: 30px;
            height: 30px;
        }
        .badge-soft-success, .badge-soft-warning {
            font-size: 12px;
        }
        .search-box {
            position: relative;
        }
        .search-icon {
            position: absolute;
            top: 10px;
            right: 10px;
            font-size: 20px;
        }
        .fixed-size {
            width: 300px; /* Set a fixed width */
            height: 250px; /* Set a fixed height */
        }

        .fixed-size-card {
            height: 100%; /* Ensure the card fills the height of the column */
            display: flex;
            flex-direction: column;
        }

        .fixed-size-card .card-body {
            flex-grow: 1;
            display: flex;
            flex-direction: column;
            justify-content: space-between;
        }

       /* Huy hiệu chung */
        .custom-badge {
            display: inline-block;
            padding: 0.5rem; /* Tương đương với p-2 */
            font-size: 75%;
            font-weight: 500;
            line-height: 1;
            text-align: center;
            white-space: nowrap;
            vertical-align: baseline;
            border-radius: 0.25rem;
        }

        /* Huy hiệu với trạng thái thành công nhẹ */
        .custom-badge-completed {
            background-color: #d4edda; /* Màu nền nhẹ nhàng */
            color: #155724; /* Màu chữ */
        }
        .custom-badge-progress {
            color: #155724;
            background-color: #F34E4E; 
        }

        .team-description {
            display: -webkit-box;
            -webkit-line-clamp: 2; /* Số dòng tối đa hiển thị */
            -webkit-box-orient: vertical;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        .btn-soft-primary {
            color: #038edc;
            background-color: rgba(3, 142, 220, .1);
            border-color: transparent !important;
        }
       
    </style>
</head>
<body>
<div class="container mt-5">

    <div class="d-flex flex-column flex-sm-row mb-4">
        <div class="flex-grow-1">
            <a asp-action="AddTask" asp-controller = "Task" asp-route-projectId="@Model.ProjectId" class="btn btn-soft-primary">
                Thêm Nhiệm Vụ
            </a>
        </div>
        <div class="d-flex flex-column flex-sm-row mb-4">
            <input type="search" id="searchTaskBox" class="form-control rounded me-sm-2 mb-2 mb-sm-0" placeholder="Nhiệm vụ..." aria-label="Search" aria-describedby="search-addon" />
            <button type="button" class="btn btn-soft-primary" onclick="searchTask()">Tìm</button>
        </div>
    </div>

    <h1  style="color: #038EDC;">Dự Án: @Model.ProjectName</h1>

    <div class="task-board" >
        <div class="task-list" id="processingTasks" ondrop="drop(event, this)" ondragover="allowDrop(event)" style="max-height: 550px; overflow: auto;">
            <h4  style="color: #038EDC;">Đang thực hiện: @Model.ProcessingTasks.Count</h4>
             @foreach(var task in Model.ProcessingTasks){
                <div class="task" draggable="true" ondragstart="drag(event)" id="@task.TaskId" data-task-id="@task.TaskId" style="position: relative;">
                    <h5>Nhiệm vụ: @task.TaskName</h5>
                      <div class="dropdown ms-2" style="position: absolute; top: 6px; right: 16px;">
                        <a href="#" class="dropdown-toggle font-size-16 text-muted" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            <i class="mdi mdi-dots-horizontal"></i>
                        </a>
                        <div class="dropdown-menu dropdown-menu-end" aria-labelledby="dropdownMenuButton">
                            <a asp-action="EditTask"  asp-route-id="@task.TaskId" class="dropdown-item">Sửa</a>
                            <div class="dropdown-divider"></div>
                            <a class="dropdown-item delete-item" type="submit" onclick="deleteTask(@task.TaskId)" data-id="project-items-8" href="javascript:void(0);">Xóa</a>
                        </div>
                    </div>
                    <p> <b>Mô tả:</b>  @task.TaskDescription</p>
                    <ul><b>Thành viên:</b>
                        @if (Model.TaskUsers.ContainsKey(task.TaskId))
                        {
                            @foreach (var user in Model.TaskUsers[task.TaskId])
                            {
                                <li style="color: black;">@user.FullName</li>
                            }
                        }
                    </ul>
                    <p class="task-status custom-badge custom-badge-completed"> @task.StatusTask</p>
                </div>
            }
        </div>

        <div class="task-list" id="completedTasks" ondrop="drop(event, this)" ondragover="allowDrop(event)" style="max-height: 550px; overflow: auto;">
            <h4  style="color: #038EDC;">Hoàn thành: @Model.CompletedTasks.Count</h4>
            @foreach(var task in Model.CompletedTasks){
                <div class="task" draggable="true" ondragstart="drag(event)" id="@task.TaskId" data-task-id="@task.TaskId" style="position: relative;">
                    <h5>Nhiệm vụ: @task.TaskName</h5>
                    <div class="dropdown ms-2" style="position: absolute; top: 6px; right: 16px;">
                        <a href="#" class="dropdown-toggle font-size-16 text-muted" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                            <i class="mdi mdi-dots-horizontal"></i>
                        </a>
                        <div class="dropdown-menu dropdown-menu-end" aria-labelledby="dropdownMenuButton">
                            <a asp-action="EditTask"  asp-route-id="@task.TaskId" class="dropdown-item">Sửa</a>
                            <div class="dropdown-divider"></div>
                            <a class="dropdown-item delete-item" type="submit" onclick="deleteTask(@task.TaskId)" data-id="project-items-8" href="javascript:void(0);">Xóa</a>
                        </div>
                    </div>
                    <p> <b>Mô tả:</b> @task.TaskDescription</p>
                    <ul><b>Thành viên:</b>
                        @if (Model.TaskUsers.ContainsKey(task.TaskId))
                        {
                            @foreach (var user in Model.TaskUsers[task.TaskId])
                            {
                                <li style="color: black;">@user.FullName</li>
                            }
                        }
                    </ul>
                    <p class="task-status custom-badge custom-badge-completed">
                        @task.StatusTask</p>
                </div>
            }
        </div>
    </div>
</div>



@*<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>*@
<script src="https://stackpath.bootstrapcdn.com/bootstrap/5.1.3/js/bootstrap.bundle.min.js"></script>
</body>
<script>


   
     function allowDrop(event) {
        event.preventDefault();
    }

    function drag(event) {
        event.dataTransfer.setData("text", event.target.getAttribute("data-task-id"));
    }

    function drop(event, target) {
        event.preventDefault();
        var taskId = event.dataTransfer.getData("text");
        var taskElement = document.querySelector(`[data-task-id="${taskId}"]`);
        target.appendChild(taskElement);

        // Update task status in the DOM
        var statusElement = taskElement.querySelector(".task-status");
        var newStatus = target.id === "completedTasks" ? "Hoàn thành" : "Đang thực hiện";
        statusElement.textContent = newStatus;
       
        // Update task status using AJAX
        updateTaskStatus(taskId, newStatus);
    }

    function updateTaskStatus(taskId, newStatus) {
    fetch(`/Task/UpdateStatus`, {
        method: "POST",
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify({ taskId: taskId, newStatus: newStatus })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            console.log("Task status updated successfully.");
        } else {
            console.log("Failed to update task status.");
        }
    })
    .catch(error => console.error("Error:", error));
}


 async function deleteTask(id) {
        if (confirm('Bạn có chắc chắn muốn xóa nhiệm vụ này không?')) {
            try {
                const response = await fetch(`/Task/DeleteTask/${id}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json',
                    }
                });

                const result = await response.json();

                if (result.success) {
                    document.getElementById(`${id}`).remove();
                    alert(result.message);
                } else {
                    alert(result.message);
                }
            } catch (error) {
                console.error('Error:', error);
                alert('Đã xảy ra lỗi khi xóa sản phẩm.');
            }
        }
    }

     async function searchTask() {
        const searchString = document.getElementById('searchTaskBox').value;
        try {
            const response = await fetch(`@Url.Action("SearchTaskByName", "Task")?searchString=${encodeURIComponent(searchString)}`);
            if (response.ok) {
                const result = await response.text();
                document.querySelector('.task-list').innerHTML = result;
            } else {
                console.error('Failed to fetch tasks', response.status, response.statusText);
            }
        } catch (error) {
            console.error('Error fetching tasks', error);
        }
    }

</script>
</html>
